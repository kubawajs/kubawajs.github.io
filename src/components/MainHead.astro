---
import { ViewTransitions } from "astro:transitions";
import "../styles/global.css";
import { SEO } from "astro-seo";

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	image?: string | undefined;
}

const {
	title = "Jakub Wajs | .NET Developer",
	description = "Jakub Wajs's and wajs-dev.net website.",
	image = ""
} = Astro.props;
---

<meta charset="UTF-8" />
<SEO
	title={title}
	description={description}
	openGraph={{
		basic: {
			title: title ? title : "",
			type: "website",
			image: image ? image : "",
		},
	}}
	,
	twitter={{
		creator: "@wajs_kuba",
	}}
/>
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />``

<title>{title}</title>
<ViewTransitions />

<link rel="sitemap" href="/sitemap-index.xml" />
<link rel="robots" href="/robots.txt" />

<link rel="icon" type="image/png" href="/favicon.png" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	rel="preload"
	as="style"
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
/>
<link
	rel="stylesheet"
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	media="print"
/>

<script is:inline>
	const getThemePreference = () => {
		if (
			typeof localStorage !== "undefined" &&
			localStorage.getItem("theme")
		) {
			return localStorage.getItem("theme");
		}

		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};

	const isDark = getThemePreference() === "dark";
	document.documentElement.classList[isDark ? "add" : "remove"]("theme-dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark =
				document.documentElement.classList.contains("theme-dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}

	function setDarkMode(document) {
		let theme = localStorage.theme === "dark" ? "dark" : "light";
		let isDark = theme === "dark";
		document.documentElement.classList[isDark ? "add" : "remove"](
			"theme-dark",
		);
		localStorage.theme = isDark ? "dark" : "light";
	}

	setDarkMode(document);

	document.addEventListener("astro:before-swap", (ev) => {
		setDarkMode(ev.newDocument);
	});
</script>
